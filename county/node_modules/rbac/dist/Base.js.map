{"version":3,"sources":["../src/Base.js"],"names":["Base","constructor","rbac","name","Error","add","remove"],"mappings":";;;;;;;;;AAGe,MAAMA,IAAN,CAAW;AACxB;;;;;;;AAOAC,EAAAA,WAAW,CAACC,IAAD,EAAaC,IAAb,EAA2B;AACpC,QAAI,CAACD,IAAD,IAAS,CAACC,IAAd,EAAoB;AAClB,YAAM,IAAIC,KAAJ,CAAU,gCAAV,CAAN;AACD;;AAED,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKD,IAAL,GAAYA,IAAZ;AACD;AAED;;;;;;;AAKMG,EAAAA,GAAN,GAAqB;AAAA;;AAAA;AACnB,YAAM;AAAEH,QAAAA;AAAF,UAAW,KAAjB;AACA,aAAOA,IAAI,CAACG,GAAL,CAAS,KAAT,CAAP;AAFmB;AAGpB;AAED;;;;;;;AAKMC,EAAAA,MAAN,GAAwB;AAAA;;AAAA;AACtB,YAAM;AAAEJ,QAAAA;AAAF,UAAW,MAAjB;AACA,aAAOA,IAAI,CAACI,MAAL,CAAY,MAAZ,CAAP;AAFsB;AAGvB;;AAnCuB","sourcesContent":["// @flow\nimport type RBAC from './RBAC';\n\nexport default class Base {\n  /**\n   * Base constructor\n   * @constructor Base\n   * @param  {RBAC}     rbac     Instance of the RBAC\n   * @param  {String}   name     Name of the grant\n   * @param  {Function} cb       Callback function after add\n   */\n  constructor(rbac: RBAC, name: string) {\n    if (!rbac || !name) {\n      throw new Error('One of parameters is undefined');\n    }\n\n    this.name = name;\n    this.rbac = rbac;\n  }\n\n  /**\n   * Add this to RBAC (storage)\n   * @method Base#remove\n   * @return {boolean}\n   */\n  async add(): boolean {\n    const { rbac } = this;\n    return rbac.add(this);\n  }\n\n  /**\n   * Remove this from RBAC (storage)\n   * @method Base#remove\n   * @return {boolean}\n   */\n  async remove(): boolean {\n    const { rbac } = this;\n    return rbac.remove(this);\n  }\n}\n"],"file":"Base.js"}