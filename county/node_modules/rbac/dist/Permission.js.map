{"version":3,"sources":["../src/Permission.js"],"names":["Permission","Base","createName","action","resource","delimiter","Error","decodeName","name","pos","indexOf","substr","constructor","rbac","isValidName","options","_action","decoded","_resource","can","exp","RegExp","test"],"mappings":"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","sourcesContent":["// @flow\nimport Base from './Base';\n\nexport default class Permission extends Base {\n  /**\n   * Compute name of permission from action and resource\n   * @function createName\n   * @memberof Permission\n   * @param {String} action Name of permission\n   * @param {String} resource Resource of permission\n   * @param {String} delimiter delimiter\n   * @return {String} Computed name of permission\n   * @static\n   */\n  static createName(action: string, resource: string, delimiter: string): string {\n    if (!delimiter) {\n      throw new Error('Delimiter is not defined');\n    }\n\n    if (!action) {\n      throw new Error('Action is not defined');\n    }\n\n    if (!resource) {\n      throw new Error('Resource is not defined');\n    }\n\n    return `${action}${delimiter}${resource}`;\n  }\n\n  static decodeName(name: string, delimiter: string): Object {\n    if (!delimiter) {\n      throw new Error('delimiter is required');\n    }\n\n    if (!name) {\n      throw new Error('Name is required');\n    }\n\n    const pos = name.indexOf(delimiter);\n    if (pos === -1) {\n      throw new Error('Wrong name');\n    }\n\n    return {\n      action: name.substr(0, pos),\n      resource: name.substr(pos + 1),\n    };\n  }\n\n  /**\n   * Permission constructor\n   * @constructor Permission\n   * @extends {Base}\n   * @param {RBAC} rbac Instance of the RBAC\n   * @param {string} action Name of the action\n   * @param {string} resource Name of the resource\n   */\n  constructor(rbac: RBAC, action: string, resource: string) {\n    if (!action || !resource) {\n      throw new Error('One of parameters is undefined');\n    }\n\n    if (!Permission.isValidName(action, rbac.options.delimiter) || !Permission.isValidName(resource, rbac.options.delimiter)) {\n      throw new Error('Action or resource has no valid name');\n    }\n\n    super(rbac, Permission.createName(action, resource, rbac.options.delimiter));\n  }\n\n  /**\n   * Get action name of actual permission\n   * @member Permission#action {String} Action of permission\n   */\n  get action(): string {\n    if (!this._action) {\n      const decoded = Permission.decodeName(this.name, this.rbac.options.delimiter);\n      if (!decoded) {\n        throw new Error('Action is null');\n      }\n\n      this._action = decoded.action;\n    }\n\n    return this._action;\n  }\n\n  /**\n   * Get resource name of actual permission\n   * @member Permission#resource {String} Resource of permission\n   */\n  get resource(): string {\n    if (!this._resource) {\n      const decoded = Permission.decodeName(this.name, this.rbac.options.delimiter);\n      if (!decoded) {\n        throw new Error('Resource is null');\n      }\n\n      this._resource = decoded.resource;\n    }\n\n    return this._resource;\n  }\n\n  /**\n   * Return true if has same action and resource\n   * @method Permission#can\n   * @param  {String}  action   Name of action\n   * @param  {String}  resource Name of resource\n   * @return {Boolean}\n   */\n  can(action: string, resource: string): boolean {\n    return this.action === action && this.resource === resource;\n  }\n\n  /**\n   * Correct name can not contain whitespace or underscores.\n   * @function isValidName\n   * @memberof Permission\n   * @param  {String} name Name\n   * @param  {String} delimiter Delimiter\n   * @return {Boolean}\n   * @static\n   */\n  static isValidName(name: string, delimiter: string): boolean {\n    if (!delimiter) {\n      throw new Error('Delimeter is not defined');\n    }\n\n    const exp = new RegExp(`^[^${delimiter}\\\\s]+$`);\n    return exp.test(name);\n  }\n}\n"],"file":"Permission.js"}