{"version":3,"sources":["../src/RBAC.js"],"names":["DEFAULT_OPTIONS","permissions","roles","grant","delimiter","RBAC","getPermissionNames","Error","map","permission","Permission","createName","constructor","options","storage","MemoryStorage","useRBAC","init","grants","create","get","name","add","item","rbac","remove","removeByName","role","child","Role","revoke","revokeByName","roleName","childName","Promise","all","grantByName","createRole","createPermission","action","resource","exists","existsRole","existsPermission","getRole","getRoles","getPermission","getPermissionByName","data","decodeName","getPermissions","createPermissions","resources","Object","keys","actions","createRoles","roleNames","permissionNames","grantsData","traverseGrants","cb","next","used","actualRole","shift","getGrants","i","length","push","result","undefined","can","canAny","includes","canAll","founded","foundedCount","hasRole","roleChildName","has","getScope","scope"],"mappings":"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","sourcesContent":["// @flow\nimport isPlainObject from 'lodash/isPlainObject';\nimport Base from './Base';\nimport Role from './Role';\nimport Permission from './Permission';\nimport Storage from './Storage';\nimport MemoryStorage from './Memory';\n\nconst DEFAULT_OPTIONS = {\n  permissions: {},\n  roles: [],\n  grant: {},\n  delimiter: '_',\n};\n\nexport default class RBAC {\n  /**\n   * Convert Array of permissions to permission name\n   * @function getPermissionNames\n   * @memberof RBAC\n   * @param  {Array} permissions List of array items of permission names. It contan action and resource\n   * @param  {string} delimiter\n   * @return {string[]}\n   * @static\n   */\n  static getPermissionNames(permissions, delimiter: string): string[] {\n    if (!delimiter) {\n      throw new Error('Delimiter is not defined');\n    }\n\n    return permissions.map(\n      permission => Permission.createName(permission[0], permission[1], delimiter),\n    );\n  }\n\n  /**\n   * RBAC constructor\n   * @constructor RBAC\n   * @param  {Object} options             Options for RBAC\n   * @param  {Storage}  [options.storage]  Storage of grants\n   * @param  {Array}    [options.roles]            List of role names (String)\n   * @param  {Object}   [options.permissions]      List of permissions\n   * @param  {Object}   [options.grants]           List of grants\n   */\n  constructor(options: Object) {\n    this.options = {\n      ...DEFAULT_OPTIONS,\n      ...options,\n    };\n\n    this.storage = this.options.storage || new MemoryStorage();\n    this.storage.useRBAC(this);\n  }\n\n  async init() {\n    const { roles, permissions, grants } = this.options;\n\n    return this.create(roles, permissions, grants);\n  }\n\n  /**\n   * Get instance of Role or Permission by his name\n   * @method RBAC#get\n   * @param {String} name Name of item\n   */\n  async get(name: string): ?Base {\n    return this.storage.get(name);\n  }\n\n  /**\n   * Register role or permission to actual RBAC instance\n   * @method RBAC#add\n   * @param {Base} item Instance of Base\n   */\n  async add(item: Base): boolean {\n    if (!item) {\n      throw new Error('Item is undefined');\n    }\n\n    if (item.rbac !== this) {\n      throw new Error('Item is associated to another RBAC instance');\n    }\n\n    return this.storage.add(item);\n  }\n\n  /**\n   * Remove role or permission from RBAC\n   * @method RBAC#remove\n   * @param {Base} item Instance of role or permission\n   */\n  async remove(item: Base): boolean {\n    if (!item) {\n      throw new Error('Item is undefined');\n    }\n\n    if (item.rbac !== this) {\n      throw new Error('Item is associated to another RBAC instance');\n    }\n\n    return this.storage.remove(item);\n  }\n\n  /**\n   * Remove role or permission from RBAC\n   * @method RBAC#removeByName\n   * @param {String} name Name of role or permission\n   */\n  async removeByName(name: string): boolean {\n    const item = await this.get(name);\n    if (!item) {\n      return true;\n    }\n\n    return item.remove();\n  }\n\n  /**\n   * Grant permission or role to the role\n   * @method RBAC#grant\n   * @param {Role} role Instance of the role\n   * @param {Base} child Instance of the role or permission\n   */\n  async grant(role: Role, child: Base): boolean {\n    if (!role || !child) {\n      throw new Error('One of item is undefined');\n    }\n\n    if (role.rbac !== this || child.rbac !== this) {\n      throw new Error('Item is associated to another RBAC instance');\n    }\n\n    if (!(role instanceof Role)) {\n      throw new Error('Role is not instance of Role');\n    }\n\n    return this.storage.grant(role, child);\n  }\n\n  /**\n   * Revoke permission or role from the role\n   * @method RBAC#revoke\n   * @param {Role} role Instance of the role\n   * @param {Base} child Instance of the role or permission\n   */\n  async revoke(role: Role, child: Base): boolean {\n    if (!role || !child) {\n      throw new Error('One of item is undefined');\n    }\n\n    if (role.rbac !== this || child.rbac !== this) {\n      throw new Error('Item is associated to another RBAC instance');\n    }\n\n    return this.storage.revoke(role, child);\n  }\n\n  /**\n   * Revoke permission or role from the role by names\n   * @method RBAC#revokeByName\n   * @param {String} roleName Instance of the role\n   * @param {String} childName Instance of the role or permission\n   */\n  async revokeByName(roleName: string, childName: string): void {\n    const [role, child] = await Promise.all([\n      this.get(roleName),\n      this.get(childName),\n    ]);\n\n    return this.revoke(role, child);\n  }\n\n  /**\n   * Grant permission or role from the role by names\n   * @method RBAC#grantByName\n   * @param {String} roleName Instance of the role\n   * @param {String} childName Instance of the role or permission\n   */\n  async grantByName(roleName: string, childName: string): void {\n    const [role, child] = await Promise.all([\n      this.get(roleName),\n      this.get(childName),\n    ]);\n\n    return this.grant(role, child);\n  }\n\n  /**\n   * Create a new role assigned to actual instance of RBAC\n   * @method RBAC#createRole\n   * @param {String} roleName Name of new Role\n   * @param {Boolean} [add] True if you need to add it to the storage\n   * @return {Role} Instance of the Role\n   */\n  async createRole(roleName: string, add?: boolean): Role {\n    const role = new Role(this, roleName);\n    if (add) {\n      await role.add();\n    }\n\n    return role;\n  }\n\n  /**\n   * Create a new permission assigned to actual instance of RBAC\n   * @method RBAC#createPermission\n   * @param {String} action Name of action\n   * @param {String} resource Name of resource\n   * @param {Boolean} [add] True if you need to add it to the storage\n   * @return {Permission} Instance of the Permission\n   */\n  async createPermission(action:string, resource: string, add?: boolean): Permission {\n    const permission = new Permission(this, action, resource);\n    if (add) {\n      await permission.add();\n    }\n\n    return permission;\n  }\n\n  /**\n   * Callback returns true if role or permission exists\n   * @method RBAC#exists\n   * @param {String} name Name of item\n   */\n  async exists(name: string): boolean {\n    return this.storage.exists(name);\n  }\n\n  /**\n   * Callback returns true if role exists\n   * @method RBAC#existsRole\n   * @param {String} name Name of item\n   */\n  async existsRole(name: string): boolean {\n    return this.storage.existsRole(name);\n  }\n\n  /**\n   * Callback returns true if permission exists\n   * @method RBAC#existsPermission\n   * @param {String} action Name of action\n   * @param {String} resource Name of resource\n   */\n  async existsPermission(action: string, resource: string): boolean {\n    return this.storage.existsPermission(action, resource);\n  }\n\n  /**\n   * Return instance of Role by his name\n   * @method RBAC#getRole\n   * @param {String} name Name of role\n   */\n  async getRole(name: string): ?Role {\n    return this.storage.getRole(name);\n  }\n\n  /**\n   * Return all instances of Role\n   * @method RBAC#getRoles\n   */\n  async getRoles(): Role[] {\n    return this.storage.getRoles();\n  }\n\n  /**\n   * Return instance of Permission by his action and resource\n   * @method RBAC#getPermission\n   * @param {String} action Name of action\n   * @param {String} resource Name of resource\n   */\n  async getPermission(action: string, resource: string): ?Permission {\n    return this.storage.getPermission(action, resource);\n  }\n\n  /**\n   * Return instance of Permission by his name\n   * @method RBAC#getPermission\n   * @param {String} name Name of permission\n   */\n  async getPermissionByName(name: string): ?Permission {\n    const data = Permission.decodeName(name, this.options.delimiter);\n    return this.storage.getPermission(data.action, data.resource);\n  }\n\n  /**\n   * Return all instances of Permission\n   * @method RBAC#getPermissions\n   */\n  async getPermissions(): Permission[] {\n    return this.storage.getPermissions();\n  }\n\n  /**\n   * Create multiple permissions in one step\n   * @method RBAC#createPermissions\n   * @param {Object} permissions Object of permissions\n   * @param {Boolean} [add=true] True if you need to add it to the storage\n   */\n  async createPermissions(resources: Object, add?: boolean = true): Permission[] {\n    if (!isPlainObject(resources)) {\n      throw new Error('Resources is not a plain object');\n    }\n\n    const permissions = {};\n\n    await Promise.all(Object.keys(resources).map(async (resource) => {\n      const actions = resources[resource];\n\n      await Promise.all(actions.map(async (action) => {\n        const permission = await this.createPermission(action, resource, add);\n        permissions[permission.name] = permission;\n      }));\n    }));\n\n    return permissions;\n  }\n\n  /**\n   * Create multiple roles in one step assigned to actual instance of RBAC\n   * @method RBAC#createRoles\n   * @param {Array} roleNames Array of role names\n   * @param {Boolean} [add=true] True if you need to add it to the storage\n   */\n  async createRoles(roleNames: string[], add?: boolean = true): Role[] {\n    const roles = {};\n    await Promise.all(roleNames.map(async (roleName) => {\n      const role = await this.createRole(roleName, add);\n\n      roles[role.name] = role;\n    }));\n\n    return roles;\n  }\n\n  /**\n   * Grant multiple items in one function\n   * @method RBAC#grants\n   * @param {Object} List of roles\n   */\n  async grants(roles: Object) {\n    if (!isPlainObject(roles)) {\n      throw new Error('Grants is not a plain object');\n    }\n\n    await Promise.all(Object.keys(roles).map(async (roleName) => {\n      const grants = roles[roleName];\n\n      await Promise.all(grants.map(async (grant) => {\n        await this.grantByName(roleName, grant);\n      }));\n    }));\n  }\n\n  /**\n   * Create multiple permissions and roles in one step\n   * @method RBAC#create\n   * @param {Object[]} roleNames List of role names\n   * @param {Object[]} permissionNames List of permission names\n   * @param {Object} [grants] List of grants\n   */\n  async create(roleNames, permissionNames, grantsData): Object {\n    const [permissions, roles] = await Promise.all([\n      this.createPermissions(permissionNames),\n      this.createRoles(roleNames),\n    ]);\n\n\n    if (grantsData) {\n      await this.grants(grantsData);\n    }\n\n    return {\n      permissions,\n      roles,\n    };\n  }\n\n  /**\n   * Traverse hierarchy of roles.\n   * Callback function returns as second parameter item from hierarchy or null if we are on the end of hierarchy.\n   * @method RBAC#_traverseGrants\n   * @param {string} roleName  Name of role\n   * @param {Function} cb Callback function\n   * @private\n   */\n  async traverseGrants(roleName: string, cb: Function, next: String[] = [roleName], used: Object = {}): any {\n    const actualRole = next.shift();\n    used[actualRole] = true;\n\n    const grants = await this.storage.getGrants(actualRole);\n    for (let i = 0; i < grants.length; i += 1) {\n      const item = grants[i];\n      const { name } = item;\n\n      if (item instanceof Role && !used[name]) {\n        used[name] = true;\n        next.push(name);\n      }\n\n      const result = await cb(item);\n      if (result !== undefined) {\n        return result;\n      }\n    }\n\n    if (next.length) {\n      return this.traverseGrants(null, cb, next, used);\n    }\n  }\n\n  /**\n   * Return true if role has allowed permission\n   * @method RBAC#can\n   * @param {string} roleName Name of role\n   * @param {string} action Name of action\n   * @param {string} resource Name of resource\n   * @return {boolean}\n   */\n  async can(roleName: string, action: string, resource: string): boolean {\n    const can = await this.traverseGrants(roleName, (item) => {\n      if (item instanceof Permission && item.can(action, resource)) {\n        return true;\n      }\n    });\n\n    return can || false;\n  }\n\n\n  /**\n   * Check if the role has any of the given permissions.\n   * @method RBAC#canAny\n   * @param  {string} roleName Name of role\n   * @param  {Object[]}  permissions Array (String action, String resource)\n   * @return {boolean}\n   */\n  async canAny(roleName: string, permissions: Object[]): boolean {\n    // prepare the names of permissions\n    const permissionNames = RBAC.getPermissionNames(permissions, this.options.delimiter);\n\n    // traverse hierarchy\n    const can = await this.traverseGrants(roleName, (item) => {\n      if (item instanceof Permission && permissionNames.includes(item.name)) {\n        return true;\n      }\n\n      return undefined;\n    });\n\n    return can || false;\n  }\n\n  /**\n   * Check if the model has all of the given permissions.\n   * @method RBAC#canAll\n   * @param {string} roleName Name of role\n   * @param {Object[]} permissions Array (String action, String resource)\n   * @return {boolean} Current instance\n   */\n  async canAll(roleName: string, permissions: Object[]) {\n    // prepare the names of permissions\n    const permissionNames = RBAC.getPermissionNames(permissions, this.options.delimiter);\n    const founded = {};\n    let foundedCount = 0;\n\n    // traverse hierarchy\n    await this.traverseGrants(roleName, (item) => {\n      if (item instanceof Permission && permissionNames.includes(item.name) && !founded[item.name]) {\n        founded[item.name] = true;\n        foundedCount += 1;\n\n        if (foundedCount === permissionNames.length) {\n          return true;\n        }\n      }\n\n      return undefined;\n    });\n\n    return foundedCount === permissionNames.length;\n  }\n\n  /**\n   * Return true if role has allowed permission\n   * @method RBAC#hasRole\n   * @param {String} roleName Name of role\n   * @param {String} roleChildName Name of child role\n   * @return {boolean}\n   */\n  async hasRole(roleName: string, roleChildName: string): boolean {\n    if (roleName === roleChildName) {\n      return true;\n    }\n\n    const has = await this.traverseGrants(roleName, (item) => {\n      if (item instanceof Role && item.name === roleChildName) {\n        return true;\n      }\n\n      return undefined;\n    });\n\n    return has || false;\n  }\n\n  /**\n   * Return array of all permission assigned to role of RBAC\n   * @method RBAC#getScope\n   * @param  {string} roleName   Name of role\n   * @return {string[]}\n   */\n  async getScope(roleName: string): string[] {\n    const scope = [];\n\n    // traverse hierarchy\n    await this.traverseGrants(roleName, (item) => {\n      if (item instanceof Permission && !scope.includes(item.name)) {\n        scope.push(item.name);\n      }\n    });\n\n    return scope;\n  }\n}\n"],"file":"RBAC.js"}