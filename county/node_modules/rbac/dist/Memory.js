"use strict";

exports.__esModule = true;
exports.default = void 0;

var _Storage = _interopRequireDefault(require("./Storage"));

var _Permission = _interopRequireDefault(require("./Permission"));

var _Role = _interopRequireDefault(require("./Role"));

var _Base = _interopRequireDefault(require("./Base"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class Memory extends _Storage.default {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "items", {});
  }

  add(item) {
    var _this = this;

    return _asyncToGenerator(function* () {
      const {
        name
      } = item;

      if (_this.items[name]) {
        throw new Error(`Item ${name} already exists`);
      }

      _this.items[name] = {
        instance: item,
        grants: []
      };
      return true;
    })();
  }

  remove(item) {
    var _this2 = this;

    return _asyncToGenerator(function* () {
      const {
        items
      } = _this2;
      const {
        name
      } = item;

      if (!items[name]) {
        throw new Error(`Item ${name} is not presented in storage`);
      } // revoke from all instances


      Object.keys(items).forEach(itemName => {
        const {
          grants
        } = items[itemName];
        items[itemName].grants = grants.filter(grant => grant !== name);
      }); // delete from items

      delete _this2.items[name];
      return true;
    })();
  }

  grant(role, child) {
    var _this3 = this;

    return _asyncToGenerator(function* () {
      const {
        name
      } = role;
      const {
        name: childName
      } = child;

      if (!_this3.items[name]) {
        throw new Error(`Role ${name} is not exist`);
      }

      if (!_this3.items[childName]) {
        throw new Error(`Base ${childName} is not exist`);
      }

      if (!(role instanceof _Role.default)) {
        throw new Error('Role is not instance of Role');
      }

      if (name === childName) {
        throw new Error(`You can grant yourself ${name}`);
      }

      const {
        grants
      } = _this3.items[name];

      if (!grants.includes(childName)) {
        grants.push(childName);
      }

      return true;
    })();
  }

  revoke(role, child) {
    var _this4 = this;

    return _asyncToGenerator(function* () {
      const {
        name
      } = role;
      const {
        name: childName
      } = child;

      if (!_this4.items[name] || !_this4.items[childName]) {
        throw new Error('Role is not exist');
      }

      const {
        grants
      } = _this4.items[name];

      if (!grants.includes(childName)) {
        throw new Error('Item is not associated to this item');
      }

      _this4.items[name].grants = grants.filter(grant => grant !== childName);
      return true;
    })();
  }

  get(name) {
    var _this5 = this;

    return _asyncToGenerator(function* () {
      if (name && _this5.items[name]) {
        return _this5.items[name].instance;
      }

      return undefined;
    })();
  }

  getRoles() {
    var _this6 = this;

    return _asyncToGenerator(function* () {
      return _this6.items.reduce((filtered, item) => {
        const {
          instance
        } = item;

        if (instance instanceof _Role.default) {
          filtered.push(instance);
        }

        return filtered;
      }, []);
    })();
  }

  getPermissions() {
    var _this7 = this;

    return _asyncToGenerator(function* () {
      return _this7.items.reduce((filtered, item) => {
        const {
          instance
        } = item;

        if (instance instanceof _Permission.default) {
          filtered.push(instance);
        }

        return filtered;
      }, []);
    })();
  }

  getGrants(role) {
    var _this8 = this;

    return _asyncToGenerator(function* () {
      if (role && _this8.items[role]) {
        const currentGrants = _this8.items[role].grants;
        return currentGrants.reduce((filtered, grantName) => {
          const grant = _this8.items[grantName];

          if (grant) {
            filtered.push(grant.instance);
          }

          return filtered;
        }, []);
      }

      return [];
    })();
  }

}

exports.default = Memory;
//# sourceMappingURL=Memory.js.map