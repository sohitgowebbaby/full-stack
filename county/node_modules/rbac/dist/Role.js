"use strict";

exports.__esModule = true;
exports.default = void 0;

var _Base = _interopRequireDefault(require("./Base"));

var _Permission = _interopRequireDefault(require("./Permission"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

class Role extends _Base.default {
  /**
   * Role constructor
   * @constructor Role
   * @extends {Base}
   * @param {RBAC} rbac Instance of the RBAC
   * @param {String} name Name of the role
   */
  constructor(rbac, name) {
    if (!_Permission.default.isValidName(name, rbac.options.delimiter)) {
      throw new Error('Role has no valid name');
    }

    super(rbac, name);
  }
  /**
   * Add role or permission to current role
   * @method Role#grant
   * @param {Role|Permission} item Instance of role or permission
   */


  grant(item) {
    var _this = this;

    return _asyncToGenerator(function* () {
      return _this.rbac.grant(_this, item);
    })();
  }
  /**
   * Remove role or permission from current role
   * @method Role#revoke
   * @param {Role|Permission} item Instance of role or permission
   */


  revoke(item) {
    var _this2 = this;

    return _asyncToGenerator(function* () {
      return _this2.rbac.revoke(_this2, item);
    })();
  }
  /**
   * Return true if contains permission
   * @method Role#can
   * @param {string} action Name of action
   * @param {string} resource Name of resource
   */


  can(action, resource) {
    var _this3 = this;

    return _asyncToGenerator(function* () {
      return _this3.rbac.can(_this3.name, action, resource);
    })();
  }
  /**
   * Check if the role has any of the given permissions
   * @method Role#canAny
   * @param {Array} permissions  List of permissions. Each has structure (String action, String resource)
   */


  canAny(permissions) {
    var _this4 = this;

    return _asyncToGenerator(function* () {
      return _this4.rbac.canAny(_this4.name, permissions);
    })();
  }
  /**
   * Check if the model has all of the given permissions
   * @method Role#canAll
   * @param {Array}  permissions List of permissions. Each has structure (String action, String resource)
   */


  canAll(permissions) {
    var _this5 = this;

    return _asyncToGenerator(function* () {
      return _this5.rbac.canAll(_this5.name, permissions);
    })();
  }
  /**
   * Return true if the current role contains the specified role name
   * @method Role#hasRole
   * @param {String} roleChildName Name of role
   */


  hasRole(roleChildName) {
    var _this6 = this;

    return _asyncToGenerator(function* () {
      return _this6.rbac.hasRole(_this6.name, roleChildName);
    })();
  }
  /**
   * Return array of permission assigned to actual role
   * @method Role#getScope
   */


  getScope() {
    var _this7 = this;

    return _asyncToGenerator(function* () {
      return _this7.rbac.getScope(_this7.name);
    })();
  }

}

exports.default = Role;
//# sourceMappingURL=Role.js.map