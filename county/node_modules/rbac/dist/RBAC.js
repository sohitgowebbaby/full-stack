"use strict";

exports.__esModule = true;
exports.default = void 0;

var _isPlainObject = _interopRequireDefault(require("lodash/isPlainObject"));

var _Base = _interopRequireDefault(require("./Base"));

var _Role = _interopRequireDefault(require("./Role"));

var _Permission = _interopRequireDefault(require("./Permission"));

var _Storage = _interopRequireDefault(require("./Storage"));

var _Memory = _interopRequireDefault(require("./Memory"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

const DEFAULT_OPTIONS = {
  permissions: {},
  roles: [],
  grant: {},
  delimiter: '_'
};

class RBAC {
  /**
   * Convert Array of permissions to permission name
   * @function getPermissionNames
   * @memberof RBAC
   * @param  {Array} permissions List of array items of permission names. It contan action and resource
   * @param  {string} delimiter
   * @return {string[]}
   * @static
   */
  static getPermissionNames(permissions, delimiter) {
    if (!delimiter) {
      throw new Error('Delimiter is not defined');
    }

    return permissions.map(permission => _Permission.default.createName(permission[0], permission[1], delimiter));
  }
  /**
   * RBAC constructor
   * @constructor RBAC
   * @param  {Object} options             Options for RBAC
   * @param  {Storage}  [options.storage]  Storage of grants
   * @param  {Array}    [options.roles]            List of role names (String)
   * @param  {Object}   [options.permissions]      List of permissions
   * @param  {Object}   [options.grants]           List of grants
   */


  constructor(options) {
    this.options = Object.assign({}, DEFAULT_OPTIONS, options);
    this.storage = this.options.storage || new _Memory.default();
    this.storage.useRBAC(this);
  }

  init() {
    var _this = this;

    return _asyncToGenerator(function* () {
      const {
        roles,
        permissions,
        grants
      } = _this.options;
      return _this.create(roles, permissions, grants);
    })();
  }
  /**
   * Get instance of Role or Permission by his name
   * @method RBAC#get
   * @param {String} name Name of item
   */


  get(name) {
    var _this2 = this;

    return _asyncToGenerator(function* () {
      return _this2.storage.get(name);
    })();
  }
  /**
   * Register role or permission to actual RBAC instance
   * @method RBAC#add
   * @param {Base} item Instance of Base
   */


  add(item) {
    var _this3 = this;

    return _asyncToGenerator(function* () {
      if (!item) {
        throw new Error('Item is undefined');
      }

      if (item.rbac !== _this3) {
        throw new Error('Item is associated to another RBAC instance');
      }

      return _this3.storage.add(item);
    })();
  }
  /**
   * Remove role or permission from RBAC
   * @method RBAC#remove
   * @param {Base} item Instance of role or permission
   */


  remove(item) {
    var _this4 = this;

    return _asyncToGenerator(function* () {
      if (!item) {
        throw new Error('Item is undefined');
      }

      if (item.rbac !== _this4) {
        throw new Error('Item is associated to another RBAC instance');
      }

      return _this4.storage.remove(item);
    })();
  }
  /**
   * Remove role or permission from RBAC
   * @method RBAC#removeByName
   * @param {String} name Name of role or permission
   */


  removeByName(name) {
    var _this5 = this;

    return _asyncToGenerator(function* () {
      const item = yield _this5.get(name);

      if (!item) {
        return true;
      }

      return item.remove();
    })();
  }
  /**
   * Grant permission or role to the role
   * @method RBAC#grant
   * @param {Role} role Instance of the role
   * @param {Base} child Instance of the role or permission
   */


  grant(role, child) {
    var _this6 = this;

    return _asyncToGenerator(function* () {
      if (!role || !child) {
        throw new Error('One of item is undefined');
      }

      if (role.rbac !== _this6 || child.rbac !== _this6) {
        throw new Error('Item is associated to another RBAC instance');
      }

      if (!(role instanceof _Role.default)) {
        throw new Error('Role is not instance of Role');
      }

      return _this6.storage.grant(role, child);
    })();
  }
  /**
   * Revoke permission or role from the role
   * @method RBAC#revoke
   * @param {Role} role Instance of the role
   * @param {Base} child Instance of the role or permission
   */


  revoke(role, child) {
    var _this7 = this;

    return _asyncToGenerator(function* () {
      if (!role || !child) {
        throw new Error('One of item is undefined');
      }

      if (role.rbac !== _this7 || child.rbac !== _this7) {
        throw new Error('Item is associated to another RBAC instance');
      }

      return _this7.storage.revoke(role, child);
    })();
  }
  /**
   * Revoke permission or role from the role by names
   * @method RBAC#revokeByName
   * @param {String} roleName Instance of the role
   * @param {String} childName Instance of the role or permission
   */


  revokeByName(roleName, childName) {
    var _this8 = this;

    return _asyncToGenerator(function* () {
      const [role, child] = yield Promise.all([_this8.get(roleName), _this8.get(childName)]);
      return _this8.revoke(role, child);
    })();
  }
  /**
   * Grant permission or role from the role by names
   * @method RBAC#grantByName
   * @param {String} roleName Instance of the role
   * @param {String} childName Instance of the role or permission
   */


  grantByName(roleName, childName) {
    var _this9 = this;

    return _asyncToGenerator(function* () {
      const [role, child] = yield Promise.all([_this9.get(roleName), _this9.get(childName)]);
      return _this9.grant(role, child);
    })();
  }
  /**
   * Create a new role assigned to actual instance of RBAC
   * @method RBAC#createRole
   * @param {String} roleName Name of new Role
   * @param {Boolean} [add] True if you need to add it to the storage
   * @return {Role} Instance of the Role
   */


  createRole(roleName, add) {
    var _this10 = this;

    return _asyncToGenerator(function* () {
      const role = new _Role.default(_this10, roleName);

      if (add) {
        yield role.add();
      }

      return role;
    })();
  }
  /**
   * Create a new permission assigned to actual instance of RBAC
   * @method RBAC#createPermission
   * @param {String} action Name of action
   * @param {String} resource Name of resource
   * @param {Boolean} [add] True if you need to add it to the storage
   * @return {Permission} Instance of the Permission
   */


  createPermission(action, resource, add) {
    var _this11 = this;

    return _asyncToGenerator(function* () {
      const permission = new _Permission.default(_this11, action, resource);

      if (add) {
        yield permission.add();
      }

      return permission;
    })();
  }
  /**
   * Callback returns true if role or permission exists
   * @method RBAC#exists
   * @param {String} name Name of item
   */


  exists(name) {
    var _this12 = this;

    return _asyncToGenerator(function* () {
      return _this12.storage.exists(name);
    })();
  }
  /**
   * Callback returns true if role exists
   * @method RBAC#existsRole
   * @param {String} name Name of item
   */


  existsRole(name) {
    var _this13 = this;

    return _asyncToGenerator(function* () {
      return _this13.storage.existsRole(name);
    })();
  }
  /**
   * Callback returns true if permission exists
   * @method RBAC#existsPermission
   * @param {String} action Name of action
   * @param {String} resource Name of resource
   */


  existsPermission(action, resource) {
    var _this14 = this;

    return _asyncToGenerator(function* () {
      return _this14.storage.existsPermission(action, resource);
    })();
  }
  /**
   * Return instance of Role by his name
   * @method RBAC#getRole
   * @param {String} name Name of role
   */


  getRole(name) {
    var _this15 = this;

    return _asyncToGenerator(function* () {
      return _this15.storage.getRole(name);
    })();
  }
  /**
   * Return all instances of Role
   * @method RBAC#getRoles
   */


  getRoles() {
    var _this16 = this;

    return _asyncToGenerator(function* () {
      return _this16.storage.getRoles();
    })();
  }
  /**
   * Return instance of Permission by his action and resource
   * @method RBAC#getPermission
   * @param {String} action Name of action
   * @param {String} resource Name of resource
   */


  getPermission(action, resource) {
    var _this17 = this;

    return _asyncToGenerator(function* () {
      return _this17.storage.getPermission(action, resource);
    })();
  }
  /**
   * Return instance of Permission by his name
   * @method RBAC#getPermission
   * @param {String} name Name of permission
   */


  getPermissionByName(name) {
    var _this18 = this;

    return _asyncToGenerator(function* () {
      const data = _Permission.default.decodeName(name, _this18.options.delimiter);

      return _this18.storage.getPermission(data.action, data.resource);
    })();
  }
  /**
   * Return all instances of Permission
   * @method RBAC#getPermissions
   */


  getPermissions() {
    var _this19 = this;

    return _asyncToGenerator(function* () {
      return _this19.storage.getPermissions();
    })();
  }
  /**
   * Create multiple permissions in one step
   * @method RBAC#createPermissions
   * @param {Object} permissions Object of permissions
   * @param {Boolean} [add=true] True if you need to add it to the storage
   */


  createPermissions(resources, add = true) {
    var _this20 = this;

    return _asyncToGenerator(function* () {
      if (!(0, _isPlainObject.default)(resources)) {
        throw new Error('Resources is not a plain object');
      }

      const permissions = {};
      yield Promise.all(Object.keys(resources).map(
      /*#__PURE__*/
      function () {
        var _ref = _asyncToGenerator(function* (resource) {
          const actions = resources[resource];
          yield Promise.all(actions.map(
          /*#__PURE__*/
          function () {
            var _ref2 = _asyncToGenerator(function* (action) {
              const permission = yield _this20.createPermission(action, resource, add);
              permissions[permission.name] = permission;
            });

            return function (_x2) {
              return _ref2.apply(this, arguments);
            };
          }()));
        });

        return function (_x) {
          return _ref.apply(this, arguments);
        };
      }()));
      return permissions;
    })();
  }
  /**
   * Create multiple roles in one step assigned to actual instance of RBAC
   * @method RBAC#createRoles
   * @param {Array} roleNames Array of role names
   * @param {Boolean} [add=true] True if you need to add it to the storage
   */


  createRoles(roleNames, add = true) {
    var _this21 = this;

    return _asyncToGenerator(function* () {
      const roles = {};
      yield Promise.all(roleNames.map(
      /*#__PURE__*/
      function () {
        var _ref3 = _asyncToGenerator(function* (roleName) {
          const role = yield _this21.createRole(roleName, add);
          roles[role.name] = role;
        });

        return function (_x3) {
          return _ref3.apply(this, arguments);
        };
      }()));
      return roles;
    })();
  }
  /**
   * Grant multiple items in one function
   * @method RBAC#grants
   * @param {Object} List of roles
   */


  grants(roles) {
    var _this22 = this;

    return _asyncToGenerator(function* () {
      if (!(0, _isPlainObject.default)(roles)) {
        throw new Error('Grants is not a plain object');
      }

      yield Promise.all(Object.keys(roles).map(
      /*#__PURE__*/
      function () {
        var _ref4 = _asyncToGenerator(function* (roleName) {
          const grants = roles[roleName];
          yield Promise.all(grants.map(
          /*#__PURE__*/
          function () {
            var _ref5 = _asyncToGenerator(function* (grant) {
              yield _this22.grantByName(roleName, grant);
            });

            return function (_x5) {
              return _ref5.apply(this, arguments);
            };
          }()));
        });

        return function (_x4) {
          return _ref4.apply(this, arguments);
        };
      }()));
    })();
  }
  /**
   * Create multiple permissions and roles in one step
   * @method RBAC#create
   * @param {Object[]} roleNames List of role names
   * @param {Object[]} permissionNames List of permission names
   * @param {Object} [grants] List of grants
   */


  create(roleNames, permissionNames, grantsData) {
    var _this23 = this;

    return _asyncToGenerator(function* () {
      const [permissions, roles] = yield Promise.all([_this23.createPermissions(permissionNames), _this23.createRoles(roleNames)]);

      if (grantsData) {
        yield _this23.grants(grantsData);
      }

      return {
        permissions,
        roles
      };
    })();
  }
  /**
   * Traverse hierarchy of roles.
   * Callback function returns as second parameter item from hierarchy or null if we are on the end of hierarchy.
   * @method RBAC#_traverseGrants
   * @param {string} roleName  Name of role
   * @param {Function} cb Callback function
   * @private
   */


  traverseGrants(roleName, cb, next = [roleName], used = {}) {
    var _this24 = this;

    return _asyncToGenerator(function* () {
      const actualRole = next.shift();
      used[actualRole] = true;
      const grants = yield _this24.storage.getGrants(actualRole);

      for (let i = 0; i < grants.length; i += 1) {
        const item = grants[i];
        const {
          name
        } = item;

        if (item instanceof _Role.default && !used[name]) {
          used[name] = true;
          next.push(name);
        }

        const result = yield cb(item);

        if (result !== undefined) {
          return result;
        }
      }

      if (next.length) {
        return _this24.traverseGrants(null, cb, next, used);
      }
    })();
  }
  /**
   * Return true if role has allowed permission
   * @method RBAC#can
   * @param {string} roleName Name of role
   * @param {string} action Name of action
   * @param {string} resource Name of resource
   * @return {boolean}
   */


  can(roleName, action, resource) {
    var _this25 = this;

    return _asyncToGenerator(function* () {
      const can = yield _this25.traverseGrants(roleName, item => {
        if (item instanceof _Permission.default && item.can(action, resource)) {
          return true;
        }
      });
      return can || false;
    })();
  }
  /**
   * Check if the role has any of the given permissions.
   * @method RBAC#canAny
   * @param  {string} roleName Name of role
   * @param  {Object[]}  permissions Array (String action, String resource)
   * @return {boolean}
   */


  canAny(roleName, permissions) {
    var _this26 = this;

    return _asyncToGenerator(function* () {
      // prepare the names of permissions
      const permissionNames = RBAC.getPermissionNames(permissions, _this26.options.delimiter); // traverse hierarchy

      const can = yield _this26.traverseGrants(roleName, item => {
        if (item instanceof _Permission.default && permissionNames.includes(item.name)) {
          return true;
        }

        return undefined;
      });
      return can || false;
    })();
  }
  /**
   * Check if the model has all of the given permissions.
   * @method RBAC#canAll
   * @param {string} roleName Name of role
   * @param {Object[]} permissions Array (String action, String resource)
   * @return {boolean} Current instance
   */


  canAll(roleName, permissions) {
    var _this27 = this;

    return _asyncToGenerator(function* () {
      // prepare the names of permissions
      const permissionNames = RBAC.getPermissionNames(permissions, _this27.options.delimiter);
      const founded = {};
      let foundedCount = 0; // traverse hierarchy

      yield _this27.traverseGrants(roleName, item => {
        if (item instanceof _Permission.default && permissionNames.includes(item.name) && !founded[item.name]) {
          founded[item.name] = true;
          foundedCount += 1;

          if (foundedCount === permissionNames.length) {
            return true;
          }
        }

        return undefined;
      });
      return foundedCount === permissionNames.length;
    })();
  }
  /**
   * Return true if role has allowed permission
   * @method RBAC#hasRole
   * @param {String} roleName Name of role
   * @param {String} roleChildName Name of child role
   * @return {boolean}
   */


  hasRole(roleName, roleChildName) {
    var _this28 = this;

    return _asyncToGenerator(function* () {
      if (roleName === roleChildName) {
        return true;
      }

      const has = yield _this28.traverseGrants(roleName, item => {
        if (item instanceof _Role.default && item.name === roleChildName) {
          return true;
        }

        return undefined;
      });
      return has || false;
    })();
  }
  /**
   * Return array of all permission assigned to role of RBAC
   * @method RBAC#getScope
   * @param  {string} roleName   Name of role
   * @return {string[]}
   */


  getScope(roleName) {
    var _this29 = this;

    return _asyncToGenerator(function* () {
      const scope = []; // traverse hierarchy

      yield _this29.traverseGrants(roleName, item => {
        if (item instanceof _Permission.default && !scope.includes(item.name)) {
          scope.push(item.name);
        }
      });
      return scope;
    })();
  }

}

exports.default = RBAC;
//# sourceMappingURL=RBAC.js.map