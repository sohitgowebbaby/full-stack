"use strict";

var _index = require("../src/index");

var _should = _interopRequireDefault(require("should"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

// import mongoose from 'mongoose';
// import dynamoose from 'dynamoose';
function testRBAC(storage, storageType) {
  describe(`RBAC ${storageType}`, () => {
    let rbac;
    let response;
    const permissions = [['create', 'article'], ['delete', 'user'], ['update', 'article']];
    const roles = ['superadmin', 'admin', 'user', 'guest'];
    const grants = {
      admin: ['user', 'delete_user'],
      user: ['create_article', 'update_article']
    };
    const permissionsAsObject = {
      article: ['create', 'update'],
      user: ['delete']
    };
    it('decode permission', () => {
      const decoded = _index.Permission.decodeName('create_article', '_');

      expect(decoded).toBeDefined();
      expect(decoded.action).toBe('create');
      expect(decoded.resource).toBe('article');
    });
    it('should be able to create roles and permissions',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      rbac = new _index.RBAC({
        storage
      });
      const data = yield rbac.create(roles, permissionsAsObject);
      expect(data).toBeDefined();
      response = data;
      response.should.have.properties(['roles', 'permissions']);

      for (let i = 0; i < roles.length; i += 1) {
        const name = roles[i];
        expect(response.roles[name]).toBeDefined();
        const instance = response.roles[name];
        expect(instance.name).toBe(name);
      }

      for (let i = 0; i < permissions.length; i += 1) {
        const permission = permissions[i];

        const name = _index.Permission.createName(permission[0], permission[1], '_');

        expect(response.permissions[name]).toBeDefined(); // check name

        const instance = response.permissions[name];
        expect(instance.name).toBe(name);
      }
    }));
    it('grant permissions for admin',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      const {
        admin
      } = response.roles;
      const deleteUser = response.permissions.delete_user;
      const granted = yield admin.grant(deleteUser);
      expect(granted).toBe(true);
    }));
    it('grant permissions for user',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      const {
        user
      } = response.roles;
      const createArticle = response.permissions.create_article;
      yield user.grant(createArticle);
    }));
    it('grant role for admin',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      const {
        admin,
        user
      } = response.roles;
      yield admin.grant(user);
    }));
    it('admin can create article',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      const {
        admin
      } = response.roles;
      const can = yield admin.can('create', 'article');
      expect(can).toBe(true);
    }));
    it('admin can delete user',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      const {
        admin
      } = response.roles;
      const can = yield admin.can('delete', 'user');
      expect(can).toBe(true);
    }));
    it('user can not delete user',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      const {
        user
      } = response.roles;
      const can = yield user.can('delete', 'user');
      expect(can).toBe(false);
    }));
    it('user can create article',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      const {
        user
      } = response.roles;
      const can = yield user.can('create', 'article');
      expect(can).toBe(true);
    }));
    it('user can any create article',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      const {
        user
      } = response.roles;
      const can = yield user.canAny(permissions);
      expect(can).toBe(true);
    }));
    it('user can all create article',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      const {
        user
      } = response.roles;
      const can = yield user.canAll(permissions);
      expect(can).toBe(false);
    }));
    it('admin can all create article',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      const {
        admin
      } = response.roles;
      yield rbac.grants(grants);
      const can = yield admin.canAll(permissions);
      expect(can).toBe(true);
    }));
    it('should be able to get role',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      const admin = yield rbac.getRole('admin');
      expect(admin.name).toBe('admin');
    }));
    it('should not be able to get permission through getRole',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      const permission = yield rbac.getRole('create_article');
      expect(permission).toBeUndefined();
    }));
    it('should be able to get permission',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      const permission = yield rbac.getPermission('create', 'article');
      expect(permission.name).toBe('create_article');
    }));
    it('should not be able to get role through getPermission',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      yield expect(rbac.getPermission('admin', '')).rejects.toEqual(new Error('Resource is not defined'));
    }));
    it('should able to revoke permission',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      const revoked = yield rbac.revokeByName('user', 'create_article');
      expect(revoked).toBe(true);
    }));
    it('user can not create article because it is revoked',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      const {
        user
      } = response.roles;
      const can = yield user.can('create', 'article');
      expect(can).toBe(false);
    }));
    it('should able to grant permission again',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      const granted = yield rbac.grantByName('user', 'create_article');
      expect(granted).toBe(true);
    }));
    it('user can create article because it is granted again',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      const {
        user
      } = response.roles;
      const can = yield user.can('create', 'article');
      expect(can).toBe(true);
    }));
    it('should be able to get role',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      const user = yield rbac.get('user');
      expect(user.name).toBe('user');
    }));
    it('should be able to get permission',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      const permission = yield rbac.get('create_article');
      expect(permission.name).toBe('create_article');
    }));
    it('should be able to remove permission',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      const removed = yield rbac.remove(response.permissions.create_article);
      expect(removed).toBe(true);
    }));
    it('should not be able to get removed permission',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      const permission = yield rbac.get('create_article');
      expect(permission).toBeUndefined();
    }));
    it('should be able to remove role',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      const removed = yield rbac.remove(response.roles.guest);
      expect(removed).toBe(true);
    }));
    it('should not be able to get removed role',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      const role = yield rbac.get('guest');
      expect(role).toBeUndefined();
    }));
    it('should be able to remove permission by name',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      const removed = yield rbac.removeByName('delete_user');
      expect(removed).toBe(true);
    }));
    it('should not be able to get removed permission',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      const permission = yield rbac.get('delete_user');
      expect(permission).toBeUndefined();
    }));
    it('should able to check existance of role',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      const exists = yield rbac.exists('admin');
      expect(exists).toBe(true);
    }));
    it('should able to check existance of non exist role',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      const exists = yield rbac.exists('adminooooo');
      expect(exists).toBe(false);
    }));
    it('should able to check existance of role',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      const exists = yield rbac.existsRole('admin');
      expect(exists).toBe(true);
    }));
    it('should able to check existance of permission',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      const exists = yield rbac.existsPermission('update', 'article');
      expect(exists).toBe(true);
    }));
    it('should be able to create roles and permissions with constructor',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      const localrbac = new _index.RBAC({
        roles,
        permissions: permissionsAsObject,
        grants
      });
      yield localrbac.init();
      rbac = localrbac;
      expect(localrbac).toBeDefined();
    }));
    it('should be able to get scope for admin',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      const scope = yield rbac.getScope('admin');
      scope.should.containDeep(['delete_user', 'create_article', 'update_article']);
    }));
    it('should be able to get scope for user',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      const scope = yield rbac.getScope('user');
      scope.should.containDeep(['create_article', 'update_article']);
    }));
    it('should be able to get scope for more complex object',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      const localRBAC = new _index.RBAC({
        roles: ['superadmin', 'admin', 'user', 'guest'],
        permissions: {
          user: ['create', 'delete'],
          password: ['change', 'forgot'],
          article: ['create'],
          rbac: ['update']
        },
        grants: {
          guest: ['create_user', 'forgot_password'],
          user: ['change_password'],
          admin: ['user', 'delete_user', 'update_rbac', 'create_article'],
          superadmin: ['admin']
        }
      });
      yield localRBAC.init();
      const scope = yield localRBAC.getScope('admin');
      scope.should.containDeep(['delete_user', 'update_rbac', 'create_article', 'change_password']);
    }));
  });
}

testRBAC(new _index.Memory(), 'Memory');
/*
const mongooseStorage = new Mongoose({
  connection: mongoose.connect('mongodb://localhost/rbac'),
});

testRBAC(mongooseStorage, 'Mongoose');


const mysqlStorage = new MySql({
  username: 'root',
  password: ''
});

testRBAC(mysqlStorage, 'MySql');
*/
// dynamoose.AWS.config.update({
//   accessKeyId: 'AKID',
//   secretAccessKey: 'SECRET',
//   region: 'us-west-2',
// });
//
// dynamoose.local();
//
// const dynamooseStorage = new Dynamoose({
//   connection: dynamoose,
// });
//
// testRBAC(dynamooseStorage, 'Dynamoose');
//# sourceMappingURL=RBAC.test.js.map