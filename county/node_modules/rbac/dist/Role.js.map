{"version":3,"sources":["../src/Role.js"],"names":["Role","Base","constructor","rbac","name","Permission","isValidName","options","delimiter","Error","grant","item","revoke","can","action","resource","canAny","permissions","canAll","hasRole","roleChildName","getScope"],"mappings":";;;;;AACA;;AACA;;;;;;;;AAEe,MAAMA,IAAN,SAAmBC,aAAnB,CAAwB;AACrC;;;;;;;AAOAC,EAAAA,WAAW,CAACC,IAAD,EAAaC,IAAb,EAA2B;AACpC,QAAI,CAACC,oBAAWC,WAAX,CAAuBF,IAAvB,EAA6BD,IAAI,CAACI,OAAL,CAAaC,SAA1C,CAAL,EAA2D;AACzD,YAAM,IAAIC,KAAJ,CAAU,wBAAV,CAAN;AACD;;AAED,UAAMN,IAAN,EAAYC,IAAZ;AACD;AAED;;;;;;;AAKMM,EAAAA,KAAN,CAAYC,IAAZ,EAAwB;AAAA;;AAAA;AACtB,aAAO,KAAI,CAACR,IAAL,CAAUO,KAAV,CAAgB,KAAhB,EAAsBC,IAAtB,CAAP;AADsB;AAEvB;AAED;;;;;;;AAKMC,EAAAA,MAAN,CAAaD,IAAb,EAAkC;AAAA;;AAAA;AAChC,aAAO,MAAI,CAACR,IAAL,CAAUS,MAAV,CAAiB,MAAjB,EAAuBD,IAAvB,CAAP;AADgC;AAEjC;AAED;;;;;;;;AAMME,EAAAA,GAAN,CAAUC,MAAV,EAA0BC,QAA1B,EAAqD;AAAA;;AAAA;AACnD,aAAO,MAAI,CAACZ,IAAL,CAAUU,GAAV,CAAc,MAAI,CAACT,IAAnB,EAAyBU,MAAzB,EAAiCC,QAAjC,CAAP;AADmD;AAEpD;AAED;;;;;;;AAKMC,EAAAA,MAAN,CAAaC,WAAb,EAAmC;AAAA;;AAAA;AACjC,aAAO,MAAI,CAACd,IAAL,CAAUa,MAAV,CAAiB,MAAI,CAACZ,IAAtB,EAA4Ba,WAA5B,CAAP;AADiC;AAElC;AAED;;;;;;;AAKMC,EAAAA,MAAN,CAAaD,WAAb,EAAmC;AAAA;;AAAA;AACjC,aAAO,MAAI,CAACd,IAAL,CAAUe,MAAV,CAAiB,MAAI,CAACd,IAAtB,EAA4Ba,WAA5B,CAAP;AADiC;AAElC;AAED;;;;;;;AAKME,EAAAA,OAAN,CAAcC,aAAd,EAA8C;AAAA;;AAAA;AAC5C,aAAO,MAAI,CAACjB,IAAL,CAAUgB,OAAV,CAAkB,MAAI,CAACf,IAAvB,EAA6BgB,aAA7B,CAAP;AAD4C;AAE7C;AAED;;;;;;AAIMC,EAAAA,QAAN,GAA+B;AAAA;;AAAA;AAC7B,aAAO,MAAI,CAAClB,IAAL,CAAUkB,QAAV,CAAmB,MAAI,CAACjB,IAAxB,CAAP;AAD6B;AAE9B;;AA7EoC","sourcesContent":["// @flow\nimport Base from './Base';\nimport Permission from './Permission';\n\nexport default class Role extends Base {\n  /**\n   * Role constructor\n   * @constructor Role\n   * @extends {Base}\n   * @param {RBAC} rbac Instance of the RBAC\n   * @param {String} name Name of the role\n   */\n  constructor(rbac: RBAC, name: string) {\n    if (!Permission.isValidName(name, rbac.options.delimiter)) {\n      throw new Error('Role has no valid name');\n    }\n\n    super(rbac, name);\n  }\n\n  /**\n   * Add role or permission to current role\n   * @method Role#grant\n   * @param {Role|Permission} item Instance of role or permission\n   */\n  async grant(item: Base) {\n    return this.rbac.grant(this, item);\n  }\n\n  /**\n   * Remove role or permission from current role\n   * @method Role#revoke\n   * @param {Role|Permission} item Instance of role or permission\n   */\n  async revoke(item: Base): boolean {\n    return this.rbac.revoke(this, item);\n  }\n\n  /**\n   * Return true if contains permission\n   * @method Role#can\n   * @param {string} action Name of action\n   * @param {string} resource Name of resource\n   */\n  async can(action: string, resource: string): boolean {\n    return this.rbac.can(this.name, action, resource);\n  }\n\n  /**\n   * Check if the role has any of the given permissions\n   * @method Role#canAny\n   * @param {Array} permissions  List of permissions. Each has structure (String action, String resource)\n   */\n  async canAny(permissions): boolean {\n    return this.rbac.canAny(this.name, permissions);\n  }\n\n  /**\n   * Check if the model has all of the given permissions\n   * @method Role#canAll\n   * @param {Array}  permissions List of permissions. Each has structure (String action, String resource)\n   */\n  async canAll(permissions): boolean {\n    return this.rbac.canAll(this.name, permissions);\n  }\n\n  /**\n   * Return true if the current role contains the specified role name\n   * @method Role#hasRole\n   * @param {String} roleChildName Name of role\n   */\n  async hasRole(roleChildName: string): boolean {\n    return this.rbac.hasRole(this.name, roleChildName);\n  }\n\n  /**\n   * Return array of permission assigned to actual role\n   * @method Role#getScope\n   */\n  async getScope(): Permission[] {\n    return this.rbac.getScope(this.name);\n  }\n}\n"],"file":"Role.js"}