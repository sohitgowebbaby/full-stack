{"version":3,"sources":["../src/Storage.js"],"names":["Storage","useRBAC","rbac","Error","add","item","remove","grant","role","child","revoke","get","name","getRoles","getPermissions","getGrants","getRole","Role","undefined","getPermission","action","resource","Permission","createName","options","delimiter","exists","existsRole","existsPermission","permission"],"mappings":"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","sourcesContent":["// @flow\nimport Permission from './Permission';\nimport Role from './Role';\nimport Base from './Base';\nimport type RBAC from './RBAC';\n\nexport default class Storage {\n  useRBAC(rbac: RBAC): void {\n    if (this.rbac) {\n      throw new Error('Storage is already in use with another instance of RBAC');\n    }\n\n    this.rbac = rbac;\n  }\n\n  /**\n   * Add permission or role\n   * @method Storage#add\n   * @param {Base} item Instance of role or permission\n   */\n  async add(item: Base): boolean {\n    throw new Error('Storage method add is not implemented');\n  }\n\n  /**\n   * Remove permission or role\n   * @method Storage#remove\n   * @param {Base} item Instance of role or permission\n   */\n  async remove(item: Base): boolean {\n    throw new Error('Storage method remove is not implemented');\n  }\n\n  /**\n   * Add (grant) permission or role to hierarchy of actual role\n   * @method Storage#grant\n   * @param  {Role} role  Instance of role\n   * @param  {Base} child Instance of role or permission\n   */\n  async grant(role: Role, child: Base): boolean {\n    throw new Error('Storage method grant is not implemented');\n  }\n\n  /**\n   * Remove (revoke) permission or role from hierarchy of actual role\n   * @method Storage#revoke\n   * @param  {Role} role  Instance of role\n   * @param  {Base} child Instance of role or permission\n   */\n  async revoke(role: Role, child: Base): boolean {\n    throw new Error('Storage method revoke is not implemented');\n  }\n\n  /**\n   * Get instance of permission or role by his name\n   * @method Storage#get\n   * @param  {String} name Name of role or permission\n   * @return {Base}\n   */\n  async get(name: string): ?Base {\n    throw new Error('Storage method get is not implemented');\n  }\n\n  /**\n   * Get all instances of Roles\n   * @method Storage#getRoles\n   * @return {Role[]}\n   */\n  async getRoles(): Role[] {\n    throw new Error('Storage method getRoles is not implemented');\n  }\n\n  /**\n   * Get all instances of Permissions\n   * @method Storage#getPermissions\n   * @return {Permission[]}\n   */\n  async getPermissions(): Permission[] {\n    throw new Error('Storage method getPermissions is not implemented');\n  }\n\n  /**\n   * Get instances of Roles and Permissions assigned to role\n   * @method Storage#getGrants\n   * @param  {String} role Name of role\n   * @return {Base[]}\n   */\n  async getGrants(role: string): Base[] {\n    throw new Error('Storage method getGrants is not implemented');\n  }\n\n  /**\n   * Get instance of role by his name\n   * @method Storage#getRole\n   * @param  {String} name Name of role\n   * @return {Role}\n   */\n  async getRole(name: string): ?Role {\n    const role = await this.get(name);\n    if (role && role instanceof Role) {\n      return role;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Get instance of permission by his name\n   * @method Storage#getPermission\n   * @param  {string} action   Name of action\n   * @param  {string} resource Name of resource\n   * @return {Permission}           Instance of actual storage\n   */\n  async getPermission(action: string, resource: string): ?Permission {\n    const name = Permission.createName(action, resource, this.rbac.options.delimiter);\n    const item = await this.get(name);\n    if (item && item instanceof Permission) {\n      return item;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Return true with callback if role or permission exists\n   * @method Storage#exists\n   * @param  {string} name Name of role or permission\n   * @return {boolean}\n   */\n  async exists(name: string): boolean {\n    const item = await this.get(name);\n    return !!item;\n  }\n\n  /**\n   * Return true with callback if role exists\n   * @method Storage#existsRole\n   * @param  {string} name Name of role\n   * @return {boolean}\n   */\n  async existsRole(name: string): boolean {\n    const role = await this.getRole(name);\n    return !!role;\n  }\n\n  /**\n   * Return true with callback if permission exists\n   * @method Storage#existsPermission\n   * @param  {string} action Name of action\n   * @param  {string} resource Name of resource\n   * @return {boolean}\n   */\n  async existsPermission(action: string, resource: string): boolean {\n    const permission = await this.getPermission(action, resource);\n    return !!permission;\n  }\n}\n"],"file":"Storage.js"}